from functools import partial
from panflute.base import (
    Element,
    MetaValue,
)
from panflute.elements import Doc
from typing import (
    Any,
    Callable,
    Dict,
    List,
    Optional,
    Union,
)


def attach(
    element: Element,
    parent: Element,
    location: Optional[str],
    index: Optional[int] = ...
) -> Element: ...


def to_json_wrapper(e: Element) -> Any: ...


class DictContainer:
    def __contains__(self, item: str) -> bool: ...
    def __getitem__(self, k: str) -> MetaValue: ...
    def __init__(self, *args, oktypes = ..., parent = ..., **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def __setitem__(self, k: str, v: MetaValue) -> None: ...
    def to_json(self) -> Dict[str, Any]: ...
    def walk(
        self,
        action: Union[partial, Callable],
        doc: Optional[Doc] = ...,
        stop_if: Optional[Callable] = ...
    ) -> List[Any]: ...


class ListContainer:
    def __eq__(self, other: ListContainer) -> bool: ...
    def __getitem__(self, i: int) -> Element: ...
    def __init__(self, *args, oktypes = ..., parent = ...) -> None: ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def insert(self, i: int, v: Any) -> None: ...
    def to_json(self) -> List[Any]: ...
    def walk(
        self,
        action: Union[partial, Callable],
        doc: Optional[Doc] = ...,
        stop_if: Optional[Callable] = ...
    ) -> List[Any]: ...
